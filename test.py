import pytest
import pyautogui
import subprocess
import time
import os
import sys

# Настройки PyAutoGUI
pyautogui.FAILSAFE = True  # Перемещение мыши в верхний левый угол останавливает выполнение
pyautogui.PAUSE = 0.5  # Пауза между действиями (в секундах)

APP_PATH = os.path.abspath("main_window.py")  

@pytest.fixture(scope="module")
def setup_app():
    """Запускает приложение и закрывает его после тестов."""
    # Запускаем приложение
    process = subprocess.Popen([sys.executable, APP_PATH])
    time.sleep(3)  # Даем приложению время на запуск
    yield
    # Закрываем приложение
    process.terminate()
    time.sleep(1)  # Ждем завершения процесса

def test_invalid_login(setup_app):
    """Тест-кейс: ошибка входа при вводе неверного логина или пароля (УИД: 1)."""
    # Предполагаем, что окно авторизации активно
    # Фокусируемся на окне приложения (можно уточнить координаты, если нужно)
    pyautogui.click(100, 100)  # Клик в область окна для активации

    # Шаг 1: Вводим правильный логин "direktor"
    pyautogui.write("direktor")
    pyautogui.press("tab")  # Переход к полю пароля

    # Шаг 2: Вводим неверный пароль "1"
    pyautogui.write("1")
    pyautogui.press("tab")  # Переход к кнопке "Войти"

    # Шаг 3: Нажимаем кнопку "Войти" (предполагаем, что кнопка активна после табуляции)
    pyautogui.press("enter")

    # Ждем появления сообщения об ошибке (окно QMessageBox)
    time.sleep(1)

    # Проверяем наличие сообщения об ошибке
    # PyAutoGUI не может напрямую читать текст окна, поэтому используем эвристику:
    # Проверяем, что фокус перешел на кнопку "Хорошо" в диалоговом окне
    pyautogui.press("enter")  # Нажимаем "Хорошо" для закрытия сообщения

    # Проверяем, что окно авторизации осталось открытым (косвенная проверка)
    # Если окно авторизации активно, можем попробовать снова ввести текст
    pyautogui.click(100, 100)  # Снова фокусируемся на окне
    pyautogui.write("test")  # Пробуем ввести текст в поле логина
    pyautogui.hotkey("ctrl", "a")  # Выделяем введенный текст
    pyautogui.press("backspace")  # Удаляем его

    # Если мы можем ввести текст, предполагаем, что окно авторизации осталось открытым
    assert True, "Окно авторизации осталось открытым после ошибки входа"

if __name__ == "__main__":
    pytest.main(["-v", __file__])
